# If we add the cluster level to the database it would create difficulties
# in the analysis. We can treat it as a third dimension instead
data_long <- melt(data_scaled,
id.vars = c("Variable", "Cluster"),  # Keep these columns fixed
variable.name = "Date",  # Column name for the time periods
value.name = "Value")  # Column name for observations
View(data_long)
# Maximum number of clusters to test
n_clusters <- 50
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Find the first k where improvement is small
k_star <- 2  # Start from the minimum valid k
for (k in 3:(n_clusters - 1)) {
diff_prev <- sil_scores[k - 2] - sil_scores[k - 3]  # Previous improvement
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
# Break if the improvement is less than a threshold (absolute or percentage-based)
if (diff_curr < 0.01 || (diff_prev > 0 && (diff_curr / diff_prev) < 0.05)) {
k_star <- k
break
}
}
# Maximum number of clusters to test
n_clusters <- 50
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 2  # Default minimum cluster number
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_prev <- sil_scores[k - 2] - sil_scores[k - 3]  # Previous improvement
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
# Ensure values are valid before applying the rule
if (!is.na(diff_curr) && !is.na(diff_prev)) {
if (diff_curr < 0.01 || (diff_prev > 0 && (diff_curr / diff_prev) < 0.05)) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
}
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
if (diff_curr < 0.01 || (diff_prev > 0 && (diff_curr / diff_prev) < 0.05)) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
if (diff_curr < 0.01) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:(1 + length(sil_scores)), silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
if (diff_curr < 0.0001) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
# Maximum number of clusters to test
n_clusters <- 50
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 2  # Default minimum cluster number
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
if (diff_curr < 0.0001) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:(1 + length(sil_scores)), silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df(1:k_star,), aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
View(sil_df)
sil_info
# Maximum number of clusters to test
n_clusters <- 50
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 2  # Default minimum cluster number
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
# Apply stopping rule for diminishing returns (only after k=3)
if (k > 2) {
diff_curr <- sil_scores[k - 1] - sil_scores[k - 2]  # Current improvement
if (diff_curr < 0.0001) {
k_star <- k
break  # Stop looping when improvement is too small
}
}
}
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:(1 + length(sil_scores)), silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df[1:k_star,], aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Print optimal k
print(paste("Optimal number of clusters:", k_star))
# Add cluster labels
data_scaled$Cluster <- as.factor(kmeans_res$cluster)
View(data_scaled)
data_long <- melt(data_scaled,
id.vars = c("Variable", "Cluster"),  # Keep these columns fixed
variable.name = "Date",  # Column name for the time periods
value.name = "Value")  # Column name for observations
sil_info
which.max(sil_info)
which.max(sil_info$sil_width)
which.max(sil_info[,3])
source("C:/Users/HP/Downloads/UChicago/1. Courses/2. Winter Quarter 2025/2.3 MACSS 31330 Econometrics and Machine Learning/ECMA31330_MLProject/Code/data_analysis.R", echo=TRUE)
sil_scores
View(sil_df)
# Maximum number of clusters to test
n_clusters <- 50
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Determine the optimal number of clusters
k_star <- which.max(sil_scores) + 1  # Add 1 since k starts from 2
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Print optimal k
print(paste("Optimal number of clusters:", k_star))
# Maximum number of clusters to test
n_clusters <- 20
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Determine the optimal number of clusters
k_star <- which.max(sil_scores) + 1  # Add 1 since k starts from 2
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Print optimal k
print(paste("Optimal number of clusters:", k_star))
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Determine the optimal number of clusters
k_star <- which.max(sil_scores) + 1  # Add 1 since k starts from 2
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Print optimal k
print(paste("Optimal number of clusters:", k_star))
kmeans_res <- kmeans(data_scaled[, -1], centers = 2)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores <- mean(sil_info[, 3])  # Store average silhouette width
kmeans_res <- kmeans(data_scaled[, -1], centers = 3)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores <- mean(sil_info[, 3])  # Store average silhouette width
kmeans_res <- kmeans(data_scaled[, -1], centers = 10)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores <- mean(sil_info[, 3])  # Store average silhouette width
kmeans_res <- kmeans(data_scaled[, -1], centers = 12)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores <- mean(sil_info[, 3])  # Store average silhouette width
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k - 1] <- mean(sil_info[, 3])  # Store average silhouette width
if (k > 2){
if (sil_scores[k-1] > sil_scores[k-2]){
k_star <- k
break
}
}
}
sil_scores
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
if (k > 2){
if (sil_scores[k] > sil_scores[k-1]){
k_star <- k
break
}
}
}
sil_scores
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
# Loop through different cluster numbers
for (k in 2:n_clusters) {
kmeans_res <- kmeans(data_scaled[, -1], centers = k)  # Run k-means
# Compute silhouette score
sil_info <- silhouette(kmeans_res$cluster, dist(data_scaled[, -1]))
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
# if (k > 2){
#   if (sil_scores[k] > sil_scores[k-1]){
#     k_star <- k
#     break
#   }
# }
}
sil_scores
# Determine the optimal number of clusters
k_star <- which.max(sil_scores)
# Create a dataframe for visualization
sil_df <- tibble(clusters = 2:n_clusters, silhouette = sil_scores)
# Create a dataframe for visualization
sil_df <- tibble(clusters = n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
View(sq_df)
View(sil_df)
# Create a dataframe for visualization
sil_df <- tibble(clusters = 1:n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
scale_x_continuous()
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
scale_x_continuous() +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Print optimal k
print(paste("Optimal number of clusters:", k_star))
il_df <- tibble(clusters = 1:n_clusters, silhouette = sil_scores)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
scale_x_continuous() +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Plot silhouette scores
sil_plot <- ggplot(sil_df, aes(x = clusters, y = silhouette, group = 1)) +
geom_point(size = 4, color = "blue") +
geom_line(color = "blue") +
xlab("Number of Clusters (k)") +
ylab("Average Silhouette Score") +
scale_x_continuous(breaks = seq(1, n_clusters, by = 1)) +
ggtitle("Silhouette Scores for Different k") +
theme_minimal()
print(sil_plot)
# Add cluster labels
data_scaled$Cluster <- as.factor(kmeans_res$cluster)
data_long <- melt(data_scaled,
id.vars = c("Variable", "Cluster"),  # Keep these columns fixed
variable.name = "Date",  # Column name for the time periods
value.name = "Value")  # Column name for observations
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
# Loop through different cluster numbers
for (k in 2:n_clusters) {
tsclust_res <- tsclust(data_scaled[, -1], k = k, distance = "dtw", type = "partitional")  # DTW-based clustering
# Compute dissimilarity matrix
diss_matrix <- proxy::dist(data_scaled[, -1], method = "DTW")
# Compute silhouette score
sil_info <- silhouette(tsclust_res@cluster, diss_matrix)
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
}
data_kmeans_dyn <- data_scaled
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
# Loop through different cluster numbers
for (k in 2:n_clusters) {
tsclust_res <- tsclust(data_kmeans_dyn[, -1], k = k, distance = "dtw", type = "partitional")  # DTW-based clustering
# Compute dissimilarity matrix
diss_matrix <- proxy::dist(data_kmeans_dyn[, -1], method = "DTW")
# Compute silhouette score
sil_info <- silhouette(tsclust_res@cluster, diss_matrix)
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
}
View(data_kmeans_dyn)
# USING DATA "1998_G7_US"
data <- fread("1998_G7_US.csv", na.strings = "NA")
# We need to format the date for future use
data <- data %>%
mutate(date = seq.Date(from = as.Date("1998-01-01"), by = "month", length.out = n()))
# Take away US monetary policy
data <- data %>% select(-US)
# Scale the numeric data
data_no_date <- data[, -1]
data_scaled <- scale(data_no_date[, lapply(.SD, as.numeric), .SDcols = names(data_no_date)])
#DATA RESTRUCTURE
# I need to transpose the data so the cluster is on variables and not on dates
data_scaled <- as.data.table(t(data_scaled))
# Assign dates to colnames
setnames(data_scaled, old = names(data_scaled), new = as.character(data[[1]]))  # Use dates as column names
# Add a new column for variable names
data_scaled[, Variable := colnames(data_no_date)]
# Move Variable column to the first position
setcolorder(data_scaled, c("Variable", setdiff(names(data_scaled), "Variable")))
data_kmeans_dyn <- data_scaled
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
# Loop through different cluster numbers
for (k in 2:n_clusters) {
tsclust_res <- tsclust(data_kmeans_dyn[, -1], k = k, distance = "dtw", type = "partitional")  # DTW-based clustering
# Compute dissimilarity matrix
diss_matrix <- proxy::dist(data_kmeans_dyn[, -1], method = "DTW")
# Compute silhouette score
sil_info <- silhouette(tsclust_res@cluster, diss_matrix)
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
}
data_kmeans_dyn <- data_scaled
# Maximum number of clusters to test
n_clusters <- 10
# Initialize silhouette scores
sil_scores <- numeric(n_clusters - 1)  # k must be at least 2
k_star <- 0
View(data_kmeans_dyn)
# Loop through different cluster numbers
for (k in 2:n_clusters) {
tsclust_res <- tsclust(data_kmeans_dyn[,-1], type = "partitional", k = k,
distance = "L2", centroid = "dtw", seed = 123)  # DTW-based clustering
# Compute dissimilarity matrix
diss_matrix <- proxy::dist(data_kmeans_dyn[, -1], method = "DTW")
# Compute silhouette score
sil_info <- silhouette(tsclust_res@cluster, diss_matrix)
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
}
# Loop through different cluster numbers
for (k in 2:n_clusters) {
tsclust_res <- tsclust(data_kmeans_dyn[,-1], type = "partitional", k = k,
distance = "L2", centroid = "sdtw_cent", seed = 123)  # DTW-based clustering
# Compute dissimilarity matrix
diss_matrix <- proxy::dist(data_kmeans_dyn[, -1], method = "DTW")
# Compute silhouette score
sil_info <- silhouette(tsclust_res@cluster, diss_matrix)
sil_scores[k] <- mean(sil_info[, 3])  # Store average silhouette width
}
